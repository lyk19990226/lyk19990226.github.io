(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{620:function(t,s,a){"use strict";a.r(s);var i=a(5),e=Object(i.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://git-scm.com/docs",target:"_blank",rel:"noopener noreferrer"}},[t._v("git官网命令查询"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_1、版本控制工具的了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、版本控制工具的了解"}},[t._v("#")]),t._v(" 1、版本控制工具的了解")]),t._v(" "),a("h3",{attrs:{id:"_1-1-认识版本控制-版本控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-认识版本控制-版本控制"}},[t._v("#")]),t._v(" 1.1.认识版本控制（版本控制）")]),t._v(" "),a("ul",[a("li",[t._v("什么是版本控制？")]),t._v(" "),a("li",[t._v("版本控制的英文是Version control；")]),t._v(" "),a("li",[t._v("是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程；")]),t._v(" "),a("li",[t._v("版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程序文件都得到同步；")]),t._v(" "),a("li",[t._v("简单来说，版本控制在软件开发中，可以帮助程序员进行代码的追踪、维护、控制等等一系列的操作。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/20/11b79c221fc09e034.png",alt:"11b79c221fc09e034.png"}})]),t._v(" "),a("h3",{attrs:{id:"_1-2-版本控制的功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-版本控制的功能"}},[t._v("#")]),t._v(" 1.2.版本控制的功能")]),t._v(" "),a("ul",[a("li",[t._v("对于我们日常开发，我们常常面临如下一些问题，通过版本控制可以很好的解决：")]),t._v(" "),a("li",[t._v("不同版本的存储管理：\n"),a("ul",[a("li",[t._v("一个项目会不断进行版本的迭代，来修复之前的一些问题、增加新的功能、需求，甚至包括项目的重构；")]),t._v(" "),a("li",[t._v("如果我们通过手动来维护一系列的项目备份，简直是一场噩梦；")])])]),t._v(" "),a("li",[t._v("重大版本的备份维护：\n"),a("ul",[a("li",[t._v("对于很多重大的版本，我们会进行备份管理；")])])]),t._v(" "),a("li",[t._v("恢复之前的项目版本：\n"),a("ul",[a("li",[t._v("当我们开发过程中发生一些严重的问题时，想要恢复之前的操作或者回到之前某个版本；")])])]),t._v(" "),a("li",[t._v("记录项目的点点滴滴：\n"),a("ul",[a("li",[t._v("如果我们每一个功能的修改、bug的修复、新的需求更改都需要记录下来，版本控制可以很好的解决；")])])]),t._v(" "),a("li",[t._v("多人开发的代码合并：\n"),a("ul",[a("li",[t._v("项目中通常都是多人开发，将多人代码进行合并，并且在出现冲突时更好的进行处理；")])])])]),t._v(" "),a("h3",{attrs:{id:"_1-3-版本控制的历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-版本控制的历史"}},[t._v("#")]),t._v(" 1.3.版本控制的历史")]),t._v(" "),a("ul",[a("li",[t._v("版本控制的史前时代（没有版本控制）：")]),t._v(" "),a("li",[t._v("人们通常通过文件备份的方式来进行管理，再通过diff命令来对比两个文件的差异；")]),t._v(" "),a("li",[a("strong",[t._v("CVS")]),t._v("（Concurrent Versions System）")]),t._v(" "),a("li",[t._v("第一个被大规模使用的版本控制工具，诞生于1985年；")]),t._v(" "),a("li",[t._v("由荷兰阿姆斯特丹VU大学的Dick Grune教授实现的，也算是SVN的前身（SVN的出现就是为了取代CVS的）。")]),t._v(" "),a("li",[a("strong",[t._v("SVN")]),t._v("（Subversion）")]),t._v(" "),a("li",[t._v("因其命令行工具名为svn因此通常被简称为SVN；")]),t._v(" "),a("li",[t._v("SVN由CollabNet公司于2000年资助并发起开发，目的是取代CVS，对CVS进行了很多的优化；")]),t._v(" "),a("li",[t._v("SVN和CVS一样，也属于集中式版本控制工具；")]),t._v(" "),a("li",[t._v("SVN在早期公司开发中使用率非常高，但是目前已经被Git取代；")]),t._v(" "),a("li",[a("strong",[t._v("Git")]),t._v("（Linus的作品）")]),t._v(" "),a("li",[t._v("早期的时候，Linux社区使用的是"),a("strong",[t._v("BitKeeper")]),t._v("来进行版本控制；")]),t._v(" "),a("li",[t._v("但是因为一些原因，BitKeeper想要收回对Linux社区的免费授权；")]),t._v(" "),a("li",[t._v("于是Linus用了大概一周的时间，开发了Git用来取代BitKeeper；")]),t._v(" "),a("li",[t._v("Linus完成了Git的核心设计，在之后Linus功成身退，将Git交由另外一个Git的主要贡献者Junio C Hamano来维护；")])]),t._v(" "),a("h2",{attrs:{id:"_2、集中式和分布式区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、集中式和分布式区别"}},[t._v("#")]),t._v(" 2、集中式和分布式区别")]),t._v(" "),a("h3",{attrs:{id:"_2-1-集中式版本控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-集中式版本控制"}},[t._v("#")]),t._v(" 2.1.集中式版本控制")]),t._v(" "),a("ul",[a("li",[t._v("CVS和SVN都是是属于集中式版本控制系统（Centralized Version Control Systems，简称 CVCS）\n"),a("ul",[a("li",[t._v("它们的主要特点是单一的集中管理的服务器，保存所有文件的修订版本；")]),t._v(" "),a("li",[t._v("协同开发人员通过客户端连接到这台服务器，取出最新的文件或者提交更新；")])])]),t._v(" "),a("li",[t._v("这种做法带来了许多好处，特别是相较于老式的本地管理来说，每个人都可以在一定程度上看到项目中的其他人正在做些什么。")]),t._v(" "),a("li",[t._v("但是集中式版本控制也有一个核心的问题：中央服务器不能出现故障：\n"),a("ul",[a("li",[t._v("如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作；")]),t._v(" "),a("li",[t._v("如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据；")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/20/2167f29452fdb7b13.png",alt:"2167f29452fdb7b13.png"}})]),t._v(" "),a("h3",{attrs:{id:"_2-2-分布式版本控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-分布式版本控制"}},[t._v("#")]),t._v(" 2.2.分布式版本控制")]),t._v(" "),a("ul",[a("li",[t._v("Git是属于分布式版本控制系统（Distributed Version Control System，简称 DVCS）\n"),a("ul",[a("li",[t._v("客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录；")]),t._v(" "),a("li",[t._v("这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复；")]),t._v(" "),a("li",[t._v("因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份；")])])]),t._v(" "),a("li",[t._v("目前在公司开发中我们都是使用Git来管理项目的，所以接下来我们会重点学习Git的各种用法；")])]),t._v(" "),a("h2",{attrs:{id:"_3、git的环境安装搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、git的环境安装搭建"}},[t._v("#")]),t._v(" 3、Git的环境安装搭建")]),t._v(" "),a("h3",{attrs:{id:"_3-1-git的安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-git的安装"}},[t._v("#")]),t._v(" 3.1.Git的安装")]),t._v(" "),a("ul",[a("li",[t._v("电脑上要想使用Git，我们需要先对Git进行安装：\n"),a("ul",[a("li",[t._v("Git的官网："),a("a",{attrs:{href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"}},[t._v("git官网"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("根据自己的操作系统下载Git即可；")])])]),t._v(" "),a("li",[t._v("在window操作系统按照默认配置全局安装即可；")])]),t._v(" "),a("h3",{attrs:{id:"_3-2-bash-cmd-gui-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-bash-cmd-gui-区别"}},[t._v("#")]),t._v(" 3.2.Bash – CMD – GUI 区别")]),t._v(" "),a("ul",[a("li",[t._v("Bash，Unix shell 的一种，Linux 与 Mac OS X 都将它作为默认 shell。\n"),a("ul",[a("li",[t._v("Git Bash 就是一个 shell，是 Windows 下的命令行工具，可以执行 Linux 命令；")]),t._v(" "),a("li",[t._v("Git Bash 是基于 CMD 的，在 CMD 的基础上增添一些新的命令与功能；")]),t._v(" "),a("li",[t._v("所以建议在使用的时候，用 Bash 更加方便；")])])]),t._v(" "),a("li",[t._v("Git CMD\n"),a("ul",[a("li",[t._v("命令行提示符（CMD）是 Windows 操作系统上的命令行解释程序；")]),t._v(" "),a("li",[t._v("当你在 Windows 上安装 git 并且习惯使用命令行时，可以使用 cmd 来运行 git 命令；")])])]),t._v(" "),a("li",[t._v("Git GUI\n"),a("ul",[a("li",[t._v("基本上针对那些不喜欢黑屏（即命令行）编码的人；")]),t._v(" "),a("li",[t._v("它提供了一个图形用户界面来运行 git 命令；")])])])]),t._v(" "),a("h3",{attrs:{id:"_3-3-git的配置分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-git的配置分类"}},[t._v("#")]),t._v(" 3.3.Git的配置分类")]),t._v(" "),a("ul",[a("li",[t._v("既然已经在系统上安装了 Git，你会需要做几件事来定制你的 Git 环境：\n"),a("ul",[a("li",[t._v("每台计算机上只需要配置一次，程序升级时会保留配置信息；")]),t._v(" "),a("li",[t._v("你可以在任何时候再次通过运行命令来修改它们；")])])]),t._v(" "),a("li",[t._v("Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量：\n"),a("ul",[a("li",[t._v("/etc/gitconfig 文件：包含系统上每一个用户及他们仓库的通用配置\n"),a("ul",[a("li",[t._v("如果在执行 git config 时带上 --system 选项，那么它就会读写该文件中的配置变量；")]),t._v(" "),a("li",[t._v("由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。（开发中通常不修改）")])])]),t._v(" "),a("li",[t._v("~/.gitconfig 或 C/users/Lyka/.gitconfig 文件：只针对当前用户\n"),a("ul",[a("li",[t._v("你可以传递 --global 选项让 Git 读写此文件，这会对你系统上 所有的仓库生效；")])])]),t._v(" "),a("li",[t._v("当前使用仓库的 Git 目录中的 config 文件（即 .git/config）：针对该仓库\n"),a("ul",[a("li",[t._v("你可以传递 --local 选项让 Git 强制读写此文件，虽然默认情况下用的就是它；")])])])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/20/46b504475a7dd0e2f.png",alt:"46b504475a7dd0e2f.png"}})]),t._v(" "),a("h3",{attrs:{id:"_3-4-git的配置选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-git的配置选项"}},[t._v("#")]),t._v(" 3.4.Git的配置选项")]),t._v(" "),a("ul",[a("li",[t._v("安装Git后，要做的第一件事就是设置你的用户名和邮件地址。\n"),a("ul",[a("li",[t._v("这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改；")]),t._v(" "),a("li",[t._v("如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lyka"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" confit --global user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1272198474@qq.com"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("ul",[a("li",[t._v("检测当前的配置信息：git config --list")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/20/5e942b651b243e00d.png",alt:"5e942b651b243e00d.png"}})]),t._v(" "),a("h3",{attrs:{id:"_3-5-git的别名-alias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-git的别名-alias"}},[t._v("#")]),t._v(" 3.5.Git的别名（alias）")]),t._v(" "),a("ul",[a("li",[t._v("Git 并不会在你输入部分命令时自动推断出你想要的命令：\n"),a("ul",[a("li",[t._v("如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/20/64c027ff4d6b59282.png",alt:"64c027ff4d6b59282.png"}})]),t._v(" "),a("h2",{attrs:{id:"_4、git初始化本地仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、git初始化本地仓库"}},[t._v("#")]),t._v(" 4、Git初始化本地仓库")]),t._v(" "),a("h3",{attrs:{id:"_4-1-获取git仓库-git-init-git-clone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-获取git仓库-git-init-git-clone"}},[t._v("#")]),t._v(" 4.1.获取Git仓库 – git init/git clone")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("我们需要一个Git来管理源代码，那么我们本地也需要有一个Git仓库。")])]),t._v(" "),a("li",[a("p",[t._v("通常有两种获取 Git 项目仓库的方式：")]),t._v(" "),a("ul",[a("li",[t._v("方式一：初始化一个Git仓库，并且可以将当前项目的文件都添加到Git仓库中（目前很多的脚手架在创建项目时都会默认创建一个Git仓库）；")]),t._v(" "),a("li",[t._v("方式二：从其它服务器 克隆（clone） 一个已存在的 Git 仓库（第一天到公司通常我们需要做这个操作）；")])])]),t._v(" "),a("li",[a("p",[t._v("方式一：初始化Git仓库")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的核心；")]),t._v(" "),a("li",[t._v("但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪；")])])]),t._v(" "),a("li",[a("p",[t._v("方式二：从Git远程仓库")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/lyk19990226/WebpackFoundation.git\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])])]),t._v(" "),a("h2",{attrs:{id:"_5、git记录更新变化过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、git记录更新变化过程"}},[t._v("#")]),t._v(" 5、Git记录更新变化过程")]),t._v(" "),a("h3",{attrs:{id:"_5-1-文件的状态划分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-文件的状态划分"}},[t._v("#")]),t._v(" 5.1.文件的状态划分")]),t._v(" "),a("ul",[a("li",[t._v("现在我们的电脑上已经有一个Git仓库：\n"),a("ul",[a("li",[t._v("在实际开发中，你需要将某些文件交由这个Git仓库来管理；")]),t._v(" "),a("li",[t._v("并且我们之后会修改文件的内容，当达成某一个目标时，想要记录下来这次操作，就会将它提交到仓库中；")])])]),t._v(" "),a("li",[t._v("那么我们需要对文件来划分不同的状态，以确定这个文件是否已经归于Git仓库的管理：\n"),a("ul",[a("li",[t._v("未跟踪(Untracked)：默认情况下，Git仓库下的文件没有添加到Git仓库管理中，我们需要通过add命令来操作；")]),t._v(" "),a("li",[t._v("已跟踪：添加到Git仓库管理的文件处于已跟踪状态，Git可以对其进行各种跟踪管理；")])])]),t._v(" "),a("li",[t._v("已跟踪的文件又可以进行细分状态划分：\n"),a("ul",[a("li",[t._v("staged：暂缓区中的文件状态；")]),t._v(" "),a("li",[t._v("Unmodified(未更改的)：commit命令，可以将staged中文件提交到本地Git仓库")]),t._v(" "),a("li",[t._v("Modified(稍作修改了)：修改了某个文件后，会处于Modified状态；")])])]),t._v(" "),a("li",[t._v("在工作时，你可以选择性地将这些修改过的文件放入暂存区；")]),t._v(" "),a("li",[t._v("然后提交所有已暂存的修改，如此反复；")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/748a4a313aaa0d758.png",alt:"748a4a313aaa0d758.png"}})]),t._v(" "),a("h3",{attrs:{id:"_5-2-git操作流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-git操作流程图"}},[t._v("#")]),t._v(" 5.2.Git操作流程图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/87b8534a79e035d42.png",alt:"87b8534a79e035d42.png"}})]),t._v(" "),a("h3",{attrs:{id:"_5-3-检测文件的状态-git-status"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-检测文件的状态-git-status"}},[t._v("#")]),t._v(" 5.3.检测文件的状态 - git status")]),t._v(" "),a("ul",[a("li",[t._v("我们在有Git仓库的目录下新建一个文件，查看文件的状态：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("Untracked files：未跟踪的文件\n"),a("ul",[a("li",[t._v("未跟踪的文件意味着 Git 在之前的提交中没有这些文件；")]),t._v(" "),a("li",[t._v("Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”；")])])]),t._v(" "),a("li",[t._v("我们也可以查看更加简洁的状态信息：\n"),a("ul",[a("li",[t._v("左栏指明了暂存区的状态，右栏指明了工作区的状态；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status -s\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status -short\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/9f478dfaea8b9e996.png",alt:"9f478dfaea8b9e996.png"}})]),t._v(" "),a("h3",{attrs:{id:"_5-4-文件添加到暂存区-git-add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-文件添加到暂存区-git-add"}},[t._v("#")]),t._v(" 5.4.文件添加到暂存区 – git add")]),t._v(" "),a("ul",[a("li",[t._v("跟踪新文件命令：(跟踪具体文件)\n"),a("ul",[a("li",[t._v("使用命令 git add 开始跟踪一个文件。")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" aaa.js\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("跟踪修改的文件命令：\n"),a("ul",[a("li",[t._v("如果我们已经跟踪了某一个文件，这个时候修改了文件也需要重新添加到暂存区中；")])])]),t._v(" "),a("li",[t._v("通过git add . 将所有的文件添加到暂存区中：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"_5-5-git忽略文件-gitignore文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-git忽略文件-gitignore文件"}},[t._v("#")]),t._v(" 5.5.git忽略文件（.gitignore文件）")]),t._v(" "),a("ul",[a("li",[t._v("一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。\n"),a("ul",[a("li",[t._v("通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等；")]),t._v(" "),a("li",[t._v("我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式；")])])]),t._v(" "),a("li",[t._v("在实际开发中，这个文件通常不需要手动创建，在必须的时候添加自己的忽略内容即可；\n"),a("ul",[a("li",[t._v("当然github上也有小伙伴整理了.gitignore模板的集合："),a("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v(".gitignore模板集合"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[t._v("如下图是创建的Vue项目自动创建的忽略文件：\n"),a("ul",[a("li",[t._v("包括一些不需要提交的文件、文件夹；")]),t._v(" "),a("li",[t._v("包括本地环境变量文件；")]),t._v(" "),a("li",[t._v("包括一些日志文件；")]),t._v(" "),a("li",[t._v("包括一些编辑器自动生成的文件；")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/10bd76e7653401fbe4.png",alt:"10bd76e7653401fbe4.png"}})]),t._v(" "),a("h3",{attrs:{id:"_5-6-文件更新提交-git-commit-m"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-文件更新提交-git-commit-m"}},[t._v("#")]),t._v(" 5.6.文件更新提交 – git commit -m")]),t._v(" "),a("ul",[a("li",[t._v("现在的暂存区已经准备就绪，可以提交了。\n"),a("ul",[a("li",[t._v("每次准备提交前，先用 git status 看下，你所需要的文件是不是都已暂存起来了；")]),t._v(" "),a("li",[t._v("再运行提交命令 git commit；")]),t._v(" "),a("li",[t._v("可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行;")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit –m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"提交信息"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("如果我们修改文件的add操作，加上commit的操作有点繁琐，那么可以将两个命令结合来使用：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -a -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"修改了xxx.js文件"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"_5-7-git的校验和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-git的校验和"}},[t._v("#")]),t._v(" 5.7.Git的校验和")]),t._v(" "),a("ul",[a("li",[t._v("Git 中所有的数据在存储前都计算校验和，然后以 校验和 来引用。\n"),a("ul",[a("li",[t._v("Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）；")]),t._v(" "),a("li",[t._v("这是一个由 40 个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算出来；")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/11f6dbce8975dfecc4.png",alt:"11f6dbce8975dfecc4.png"}})]),t._v(" "),a("h3",{attrs:{id:"_5-8-查看提交的历史-git-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-查看提交的历史-git-log"}},[t._v("#")]),t._v(" 5.8.查看提交的历史 – git log")]),t._v(" "),a("ul",[a("li",[t._v("在提交了若干更新，又或者克隆了某个项目之后，有时候我们想要查看一下所有的历史提交记录。")]),t._v(" "),a("li",[t._v("这个时候我们可以使用git log命令：\n"),a("ul",[a("li",[t._v("不传入任何参数的默认情况下，git log 会按时间先后顺序列出所有的提交，最近的更新排在最上面；")]),t._v(" "),a("li",[t._v("这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log  // 历史提交记录\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline //漂亮单线历史提交记录\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline --graph //漂亮的图形单线历史提交记录\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/12ca3d2a7b2a8e0d3f.png",alt:"12ca3d2a7b2a8e0d3f.png"}})]),t._v(" "),a("h3",{attrs:{id:"_5-9-版本回退-git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-9-版本回退-git-reset"}},[t._v("#")]),t._v(" 5.9.版本回退 – git reset")]),t._v(" "),a("ul",[a("li",[t._v("如果想要进行版本回退，我们需要先知道目前处于哪一个版本：Git通过HEAD指针记录当前版本。")]),t._v(" "),a("li",[t._v("HEAD 是当前分支引用的指针，它总是指向该分支上的最后一次提交；")]),t._v(" "),a("li",[t._v("理解 HEAD 的最简方式，就是将它看做 该分支上的最后一次提交 的快照；")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/13e42b6f094cffd844.png",alt:"13e42b6f094cffd844.png"}})]),t._v(" "),a("ul",[a("li",[t._v("我们可以通过HEAD来改变Git目前的版本指向：\n"),a("ul",[a("li",[t._v("上一个版本就是HEAD^，上上一个版本就是HEAD^^；")]),t._v(" "),a("li",[t._v("如果是上1000个版本，我们可以使用HEAD~1000；")]),t._v(" "),a("li",[t._v("我们可以可以指定某一个commit id；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^ //回退到上一个版本，上上一个版本就是HEAD^^\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD~1000 //回退到上1000个版本\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard 2d44982 //回退到具体版本（指定具体版本的校验和）\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"_6、git远程仓库和验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、git远程仓库和验证"}},[t._v("#")]),t._v(" 6、Git远程仓库和验证")]),t._v(" "),a("h3",{attrs:{id:"_6-1-什么是远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-什么是远程仓库"}},[t._v("#")]),t._v(" 6.1.什么是远程仓库？")]),t._v(" "),a("ul",[a("li",[t._v("什么是远程仓库（Remote Repository）呢？\n"),a("ul",[a("li",[t._v("目前我们的代码是保存在一个本地仓库中，也就意味着我们只是在进行本地操作；")]),t._v(" "),a("li",[t._v("在真实开发中，我们通常是多人开发的，所以我们会将管理的代码共享到远程仓库中；")])])]),t._v(" "),a("li",[t._v("那么如何创建一个远程仓库呢？\n"),a("ul",[a("li",[t._v("远程仓库通常是搭建在某一个服务器上的（当然本地也可以，但是本地很难共享）；")]),t._v(" "),a("li",[t._v("所以我们需要在Git服务器上搭建一个远程仓库；")])])]),t._v(" "),a("li",[t._v("目前我们有如下方式可以使用Git服务器：\n"),a("ul",[a("li",[t._v("使用第三方的Git服务器：比如GitHub、Gitee、Gitlab等等；")]),t._v(" "),a("li",[t._v("在自己服务器搭建一个Git服务；")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/143bd6dfa7014d571f.png",alt:"143bd6dfa7014d571f.png"}})]),t._v(" "),a("h3",{attrs:{id:"_6-2-远程仓库的验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-远程仓库的验证"}},[t._v("#")]),t._v(" 6.2.远程仓库的验证")]),t._v(" "),a("ul",[a("li",[t._v("常见的远程仓库有哪些呢？目前比较流行使用的是三种：\n"),a("ul",[a("li",[t._v("GitHub：https://github.com/")]),t._v(" "),a("li",[t._v("Gitee：https://gitee.com/")]),t._v(" "),a("li",[t._v("codewhy搭建Gitlab：http://152.136.185.210:7888/ （由于gitlab服务器在国外；所以很大概率访问不到，需要通过科学上网方式访问；一般公司会搭建自己的gitlab;具体如何搭建，可以网上搜搜哦；这里不做解释）")])])]),t._v(" "),a("li",[t._v("对于私有的仓库我们想要进行操作，远程仓库会对我们的身份进行验证：\n"),a("ul",[a("li",[t._v("如果没有验证，任何人都可以随意操作仓库是一件非常危险的事情；")])])]),t._v(" "),a("li",[t._v("目前Git服务器验证手段主要有两种：\n"),a("ul",[a("li",[t._v("方式一："),a("strong",[t._v("基于HTTP的凭证存储")]),t._v("（Credential Storage）；")]),t._v(" "),a("li",[t._v("方式二："),a("strong",[t._v("基于SSH的密钥；")])])])]),t._v(" "),a("li",[t._v("下面我们来具体讨论一下这两种方式的验证规则和过程；")])]),t._v(" "),a("h3",{attrs:{id:"_6-3-远程仓库的验证-凭证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-远程仓库的验证-凭证"}},[t._v("#")]),t._v(" 6.3.远程仓库的验证 – 凭证")]),t._v(" "),a("ul",[a("li",[t._v("因为本身HTTP协议是"),a("strong",[t._v("无状态")]),t._v("的连接，所以每一个连接都需要用户名和密码：\n"),a("ul",[a("li",[t._v("如果每次都这样操作，那么会非常麻烦；")]),t._v(" "),a("li",[t._v("幸运的是，Git 拥有一个凭证系统来处理这个事情； "),a("a",{attrs:{href:"https://aka.ms/gcmcore",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git Credential Manager Core (GCM Core)"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("GCM 包含在"),a("a",{attrs:{href:"https://gitforwindows.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git for Windows"),a("OutboundLink")],1),t._v("中，并且最新版本包含在每个新的 Git for Windows 版本中。这是在 Windows 上安装 GCM 的首选方式。在安装过程中，您将被要求选择一个凭证助手，并将 GCM 设置为默认值。")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/168baec6f0b3864214.png",alt:"168baec6f0b3864214.png"}})]),t._v(" "),a("ul",[a("li",[t._v("下面有一些 Git Crediential 的选项：（之前的方案->了解）\n"),a("ul",[a("li",[t._v("选项一：默认所有都不缓存。 每一次连接都会询问你的用户名和密码；")]),t._v(" "),a("li",[t._v("选项二：“cache” 模式会将凭证存放在内存中一段时间。 密码永远不会被存储在磁盘中，并且在15分钟后从内存中清除；")]),t._v(" "),a("li",[t._v("选项三：“store” 模式会将凭证用明文的形式存放在磁盘中，并且永不过期；")]),t._v(" "),a("li",[t._v("选项四：如果你使用的是 Mac，Git 还有一种 “osxkeychain” 模式，它会将凭证缓存到你系统用户的钥匙串中（加密的）；")]),t._v(" "),a("li",[t._v("选项五：如果你使用的是 Windows，你可以安装一个叫做 “Git Credential Manager for Windows” 的辅助工具；\n"),a("ul",[a("li",[t._v("可以在 "),a("a",{attrs:{href:"https://github.com/Microsoft/Git-Credential-Manager-for-Windows",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git-Credential-Manager-for-Windows"),a("OutboundLink")],1),t._v(" 下载。")])])])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/17fc07ef269051c312.png",alt:"17fc07ef269051c312.png"}})]),t._v(" "),a("h3",{attrs:{id:"_6-4-远程仓库的验证-ssh密钥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-远程仓库的验证-ssh密钥"}},[t._v("#")]),t._v(" 6.4.远程仓库的验证 – SSH密钥")]),t._v(" "),a("ul",[a("li",[t._v("Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。")]),t._v(" "),a("li",[t._v("SSH以非对称加密实现身份验证。\n"),a("ul",[a("li",[t._v("例如其中一种方法是使用自动生成的公钥-私钥对来简单地加密网络连接，随后使用密码认证进行登录；")]),t._v(" "),a("li",[t._v("另一种方法是人工生成一对公钥和私钥，通过生成的密钥进行认证，这样就可以在不输入密码的情况下登录；")]),t._v(" "),a("li",[t._v("公钥需要放在待访问的电脑之中，而对应的私钥需要由用户自行保管；")])])]),t._v(" "),a("li",[t._v("如果我们以SSH的方式访问Git仓库，那么就需要生产对应的公钥和私钥："),a("a",{attrs:{href:"https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key",target:"_blank",rel:"noopener noreferrer"}},[t._v("生成你的 SSH 公钥相关文档"),a("OutboundLink")],1)])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ssh-keygen -o //生成公共/私有 rsa 密钥对。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/15b6877f9a9c9f3029.png",alt:"15b6877f9a9c9f3029.png"}})]),t._v(" "),a("h3",{attrs:{id:"_6-5-管理远程服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-管理远程服务器"}},[t._v("#")]),t._v(" 6.5.管理远程服务器")]),t._v(" "),a("ul",[a("li",[t._v("查看远程地址：比如我们之前从GitHub上clone下来的代码，它就是有自己的远程仓库的：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote –v  //-v是—verbose的缩写"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("冗长的"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/19.png",alt:"19.png"}})]),t._v(" "),a("ul",[a("li",[t._v("添加远程地址：我们也可以继续添加远程服务器（让本地的仓库和远程服务器仓库建立连接）：\n"),a("ul",[a("li",[a("code",[t._v("<shortname>")]),t._v("   ： 远程仓库地址简称  -> 一般设置为origin")]),t._v(" "),a("li",[a("code",[t._v("<url>")]),t._v("  ：远程仓库地址")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("//git remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("shortname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" github https://github.com/lyk19990226/wyymusic.git\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("ul",[a("li",[t._v("重命名远程地址：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),t._v(" github origin\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("移除远程地址：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote remove origin\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/20.png",alt:"20.png"}})]),t._v(" "),a("h3",{attrs:{id:"_6-6-远程仓库的交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-远程仓库的交互"}},[t._v("#")]),t._v(" 6.6.远程仓库的交互")]),t._v(" "),a("ul",[a("li",[t._v("从远程仓库clone代码：将存储库克隆到新创建的目录中；")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/lyk19990226/wyymusic.git\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("将代码push到远程仓库：将本地仓库的代码推送到远程仓库中；\n"),a("ul",[a("li",[t._v("默认情况下是将当前分支（比如master）push到origin远程仓库的；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n\n//git push -u "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("shortname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("ul",[a("li",[a("p",[t._v("从远程仓库fetch代码：从远程仓库获取最新的代码")]),t._v(" "),a("ul",[a("li",[t._v("默认情况下是从origin中获取代码；")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch origin\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("ul",[a("li",[t._v("获取到代码后默认并没有合并到本地仓库，我们需要通过merge来合并；")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("从远程仓库pull代码：上面的两次操作有点繁琐，我们可以通过一个命令来操作\\")])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n//或者\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge //也可 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase   --"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  具体什么区别，后续学习\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"_6-7-常见的开源协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-常见的开源协议"}},[t._v("#")]),t._v(" 6.7.常见的开源协议")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/163df3c05f0b25d32f.png",alt:"163df3c05f0b25d32f.png"}})]),t._v(" "),a("h2",{attrs:{id:"_7、git的标签tag用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、git的标签tag用法"}},[t._v("#")]),t._v(" 7、Git的标签tag用法")]),t._v(" "),a("h3",{attrs:{id:"_7-1-git标签-tag-创建tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-git标签-tag-创建tag"}},[t._v("#")]),t._v(" 7.1.Git标签（tag） - 创建tag")]),t._v(" "),a("ul",[a("li",[t._v("对于重大的版本我们常常会打上一个标签，以表示它的重要性：\n"),a("ul",[a("li",[t._v("Git 可以给仓库历史中的某一个提交打上标签；")]),t._v(" "),a("li",[t._v("比较有代表性的是人们会使用这个功能来标记发布结点（ v1.0 、 v2.0 等等）；")])])]),t._v(" "),a("li",[t._v("创建标签：\n"),a("ul",[a("li",[t._v("Git 支持两种标签：轻量标签（lightweight）与附注标签（annotated）；")]),t._v(" "),a("li",[t._v("附注标签：通过-a选项，并且通过-m添加额外信息；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag v1.0.0\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -a v1.0.1 -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'标签额外信息补充'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("ul",[a("li",[t._v("默认情况下，git push 命令并不会传送标签到远程仓库服务器上。\n"),a("ul",[a("li",[t._v("在创建完标签后你必须显式地推送标签到共享服务器上，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签；")])])])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin v1.0.0 //指定本地仓库创建的具体标签 共享到git远程仓库上\ngit push origin --tags //将本地仓库创建的所有标签 共享到git远程仓库上\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"_7-2-git标签-tag-删除和检出tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-git标签-tag-删除和检出tag"}},[t._v("#")]),t._v(" 7.2.Git标签（tag） - 删除和检出tag")]),t._v(" "),a("ul",[a("li",[t._v("删除本地tag：\n"),a("ul",[a("li",[t._v("要删除掉你本地仓库上的标签，可以使用命令 git tag -d")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d v1.0.1\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("删除远程tag：\n"),a("ul",[a("li",[t._v("要删除远程的tag我们可以通过git push  –delete")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete v1.0.1\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("检出tag：\n"),a("ul",[a("li",[t._v("如果你想查看某个标签所指向的文件版本，可以使用 git checkout 命令；")]),t._v(" "),a("li",[t._v("通常我们在检出tag的时候还会创建一个对应的分支（分支后续了解）；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout v1.0.0 // 检出某个标签所指向的文件版本\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard v1.0.0 //回退到某个标签所指向的文件版本\n//上面两命令区别如下图参考\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/21.png",alt:"21.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/22.png",alt:"22.png"}})]),t._v(" "),a("h2",{attrs:{id:"_8、git分支的使用过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、git分支的使用过程"}},[t._v("#")]),t._v(" 8、Git分支的使用过程")]),t._v(" "),a("h3",{attrs:{id:"_8-1-git提交对象-commit-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-git提交对象-commit-object"}},[t._v("#")]),t._v(" 8.1.Git提交对象（Commit Object）")]),t._v(" "),a("ul",[a("li",[t._v("几乎所有的版本控制系统都以某种形式支持分支。\n"),a("ul",[a("li",[t._v("使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。")])])]),t._v(" "),a("li",[t._v("在进行提交操作时，Git 会保存一个提交对象（commit object）：\n"),a("ul",[a("li",[t._v("该提交对象会包含一个指向暂存内容快照的指针；")]),t._v(" "),a("li",[t._v("该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针；\n"),a("ul",[a("li",[t._v("首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象；")]),t._v(" "),a("li",[t._v("而由多个分支合并产生的提交对象有多个父对象；")])])])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/23.png",alt:"23.png"}})]),t._v(" "),a("h3",{attrs:{id:"_8-2-git-master分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-git-master分支"}},[t._v("#")]),t._v(" 8.2.Git master分支")]),t._v(" "),a("ul",[a("li",[t._v("Git 的分支，其实本质上仅仅是指向提交对象的可变指针。\n"),a("ul",[a("li",[t._v("Git 的默认分支名字是 master，在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支；")]),t._v(" "),a("li",[t._v("master 分支会在每次提交时自动移动；")])])]),t._v(" "),a("li",[t._v("Git 的 master 分支并不是一个特殊分支。\n"),a("ul",[a("li",[t._v("它就跟其它分支完全没有区别；")]),t._v(" "),a("li",[t._v("之所以几乎每一个仓库都有 master 分支，是因为 git init 命令默认创建它，并且大多数人都懒得去改动它；")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/24.png",alt:"24.png"}})]),t._v(" "),a("h3",{attrs:{id:"_8-3-git创建分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-git创建分支"}},[t._v("#")]),t._v(" 8.3.Git创建分支")]),t._v(" "),a("ul",[a("li",[t._v("Git 是怎么创建新分支的呢？\n"),a("ul",[a("li",[t._v("很简单，它只是为你创建了一个可以移动的新的指针；")])])]),t._v(" "),a("li",[t._v("比如，创建一个 testing 分支， 你需要使用 git branch 命令：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch testing\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/25.png",alt:"25.png"}})]),t._v(" "),a("ul",[a("li",[t._v("那么，Git 又是怎么知道当前在哪一个分支上呢？\n"),a("ul",[a("li",[t._v("也很简单，它有一个名为 HEAD 的特殊指针；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("//当然我们也可以通过如下命令来切换HEAD指针\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout testing\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/26.png",alt:"26.png"}})]),t._v(" "),a("h3",{attrs:{id:"_8-4-git分支提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-git分支提交"}},[t._v("#")]),t._v(" 8.4.Git分支提交")]),t._v(" "),a("ul",[a("li",[t._v("如果我们指向某一个分支，并且在这个分支上提交(commit)：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/27.png",alt:"27.png"}})]),t._v(" "),a("ul",[a("li",[t._v("你也可以切换回到master分支，继续开发：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/28.png",alt:"28.png"}})]),t._v(" "),a("h3",{attrs:{id:"_8-5-创建分支同时切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-5-创建分支同时切换"}},[t._v("#")]),t._v(" 8.5.创建分支同时切换")]),t._v(" "),a("ul",[a("li",[t._v("创建新分支的同时切换过去\n"),a("ul",[a("li",[t._v("通常我们会在创建一个新分支后立即切换过去；")]),t._v(" "),a("li",[t._v("这可以用 "),a("code",[t._v("git checkout -b <newbranchname>")]),t._v("  一条命令搞定；")])])])]),t._v(" "),a("h3",{attrs:{id:"_8-6-为什么需要使用分支呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-6-为什么需要使用分支呢"}},[t._v("#")]),t._v(" 8.6.为什么需要使用分支呢？")]),t._v(" "),a("ul",[a("li",[t._v("让我们来看一个简单的分支新建与分支合并的例子，实际工作中你可能会用到类似的工作流。\n"),a("ul",[a("li",[t._v("开发某个项目，在默认分支master上进行开发；")]),t._v(" "),a("li",[t._v("实现项目的功能需求，不断提交；")]),t._v(" "),a("li",[t._v("并且在一个大的版本完成时，发布版本，打上一个tag v1.0.0；")])])]),t._v(" "),a("li",[t._v("继续开发后续的新功能，正在此时，你突然接到一个电话说有个很严重的问题需要紧急修补， 你将按照如下方式来处理：\n"),a("ul",[a("li",[t._v("切换到tag v1.0.0的版本，并且创建一个分支hotfix；")])])]),t._v(" "),a("li",[t._v("想要新建一个分支并同时切换到那个分支上，你可以运行一个带有 -b 参数的 git checkout 命令：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b hotfix\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/29.png",alt:"29.png"}})]),t._v(" "),a("h3",{attrs:{id:"_8-7-分支开发和合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-分支开发和合并"}},[t._v("#")]),t._v(" 8.7.分支开发和合并")]),t._v(" "),a("ul",[a("li",[t._v("分支上开发、修复bug：\n"),a("ul",[a("li",[t._v("我们可以在创建的hotfix分支上继续开发工作或者修复bug；")]),t._v(" "),a("li",[t._v("当完成要做的工作后，重新打上一个新的tag v1.0.1；")])])]),t._v(" "),a("li",[t._v("切换回master分支，但是这个时候master分支也需要修复刚刚的bug：\n"),a("ul",[a("li",[t._v("所以我们需要将master分支和hotfix分支进行合并；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master  //切换回 master分支\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge hotfix  //在master分支上执行该命令：   即在master分支上创建一个新的提交文件版本信息 并 将hotfix分支 合并到master分支的（新的提交文件版本信息）上\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/30.png",alt:"30.png"}})]),t._v(" "),a("h3",{attrs:{id:"_8-8-查看和删除分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-8-查看和删除分支"}},[t._v("#")]),t._v(" 8.8.查看和删除分支")]),t._v(" "),a("ul",[a("li",[t._v("如果我们希望查看当前所有的分支，可以通过以下命令：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看当前所有的分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch –v "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 同时查看最后一次提交")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --merged "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有合并到当前分支的分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --no-merged "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有没有合并到当前分支的分支")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("ul",[a("li",[t._v("如果某些已经合并的分支我们不再需要了，那么可以将其移除掉：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch –d hotfix "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除当前分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch –D hotfix "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强制删除某一个分支")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"_9、工作中的git-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、工作中的git-flow"}},[t._v("#")]),t._v(" 9、工作中的Git Flow")]),t._v(" "),a("h3",{attrs:{id:"_9-1-git的工作流-git-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-git的工作流-git-flow"}},[t._v("#")]),t._v(" 9.1.Git的工作流（git flow）")]),t._v(" "),a("ul",[a("li",[t._v("由于Git上分支的使用的便捷性，产生了很多Git的工作流：\n"),a("ul",[a("li",[t._v("也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；")]),t._v(" "),a("li",[t._v("你可以定期地把某些主题分支合并入其他分支中；")])])]),t._v(" "),a("li",[t._v("比如以下的工作流：\n"),a("ul",[a("li",[t._v("master作为主分支；")]),t._v(" "),a("li",[t._v("develop作为开发分支，并且有稳定版本时，合并到master分支中；")]),t._v(" "),a("li",[t._v("topic作为某一个主题或者功能或者特性的分支进行开发，开发完成后合并到develop分支中；")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/31.png",alt:"31.png"}})]),t._v(" "),a("h3",{attrs:{id:"_9-2-比较常见的git-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-比较常见的git-flow"}},[t._v("#")]),t._v(" 9.2.比较常见的git flow")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/32.png",alt:"32.png"}})]),t._v(" "),a("h2",{attrs:{id:"_10、git远程分支的管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、git远程分支的管理"}},[t._v("#")]),t._v(" 10、Git远程分支的管理")]),t._v(" "),a("h3",{attrs:{id:"_10-1-git的远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-git的远程分支"}},[t._v("#")]),t._v(" 10.1.Git的远程分支")]),t._v(" "),a("ul",[a("li",[t._v("远程分支是也是一种分支结构：\n"),a("ul",[a("li",[t._v("以"),a("code",[t._v("<remote>/<branch>")]),t._v(" 的形式命名的；如：origin/main")])])]),t._v(" "),a("li",[t._v("如果我们刚刚clone下来代码，分支的结构如下：")]),t._v(" "),a("li",[t._v("如果其他人修改了代码，那么远程分支结构如下：\n"),a("ul",[a("li",[t._v("你需要通过fetch来获取最新的远程分支提交信息；")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/33.png",alt:"33.png"}})]),t._v(" "),a("h3",{attrs:{id:"_10-2-远程分支的管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-远程分支的管理"}},[t._v("#")]),t._v(" 10.2.远程分支的管理")]),t._v(" "),a("ul",[a("li",[t._v("操作一：推送分支到远程\n"),a("ul",[a("li",[t._v("当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上；")]),t._v(" "),a("li",[t._v("运行 "),a("code",[t._v("git push <remote> <branch>")]),t._v(" ；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("操作二：跟踪远程分支\n"),a("ul",[a("li",[t._v("当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支；")]),t._v(" "),a("li",[t._v("如果你愿意的话可以设置其他的跟踪分支，可以通过运行 git checkout --track /")]),t._v(" "),a("li",[t._v("如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout --track "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("ul",[a("li",[t._v("操作三：删除远程分支\n"),a("ul",[a("li",[t._v("如果某一个远程分支不再使用，我们想要删除掉，可以运行带有 --delete 选项的 git push 命令来删除一个远程分支。")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"_11、git-rebase的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11、git-rebase的使用"}},[t._v("#")]),t._v(" 11、Git rebase的使用")]),t._v(" "),a("h3",{attrs:{id:"_11-1-git-rebase用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-git-rebase用法"}},[t._v("#")]),t._v(" 11.1.Git rebase用法")]),t._v(" "),a("ul",[a("li",[t._v("在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。(居然区别，如下图进行理解)")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/dsfsd.png",alt:"dsfsd.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/35.png",alt:"35.png"}})]),t._v(" "),a("ul",[a("li",[t._v("什么是rebase呢？\n"),a("ul",[a("li",[t._v("在上面的图例中，你可以提取在 C4~C5 中引入的补丁和修改，然后在 C8 的基础上应用一次；")]),t._v(" "),a("li",[t._v("在 Git 中，这种操作就叫做 变基（rebase）；")]),t._v(" "),a("li",[t._v("你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样；")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase main  //main 目标基底\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("注意：千万不要在主分支使用git rebase")])]),t._v(" "),a("h3",{attrs:{id:"_11-2-rebase的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-rebase的原理"}},[t._v("#")]),t._v(" 11.2.rebase的原理")]),t._v(" "),a("ul",[a("li",[t._v("rebase是如何工作的呢？\n"),a("ul",[a("li",[t._v("它的原理是首先找到这两个分支（即当前分支 dev、变基操作的目标基底分支 main） 的最近共同祖先 C3；")]),t._v(" "),a("li",[t._v("然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件；")]),t._v(" "),a("li",[t._v("然后将当前分支指向目标基底 C8；")]),t._v(" "),a("li",[t._v("最后以此将之前另存为临时文件的修改依序应用；")])])]),t._v(" "),a("li",[t._v("我们可以再次执行main上的合并操作：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout main\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/36.png",alt:"36.png"}})]),t._v(" "),a("h2",{attrs:{id:"_12、git常见命令速查表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12、git常见命令速查表"}},[t._v("#")]),t._v(" 12、Git常见命令速查表")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.imagehub.cc/images/2022/08/21/37.png",alt:"37.png"}})]),t._v(" "),a("h2",{attrs:{id:"_13、git常见命令总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13、git常见命令总结"}},[t._v("#")]),t._v(" 13、git常见命令总结")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v('git config --global user.name "coderhub"')]),t._v("   /    "),a("code",[t._v('git confit --global user.email "coderhub@qq.com"')]),t._v("  配置个人信息")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git config --list")]),t._v("  查看配置信息列表")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git config --global alias.st status")]),t._v("  取别名（了解）-> 该命令执行后："),a("code",[t._v("git st")]),t._v(" 相当于 "),a("code",[t._v("git status")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git init")]),t._v("  初始化Git仓库")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git clone git仓库网址")]),t._v("  克隆git服务器上的项目")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git status")]),t._v("  /  "),a("code",[t._v("git status -short -> 简写：git status -s")]),t._v("  检测文件的状态")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git add .")]),t._v("  将该目录下所有文件添加到暂存区 （对文件进行跟踪）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git commit -m '提交信息'")]),t._v("   文件更新提交 ，将暂存区的文件加入到git本地仓库中")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git commit -a -m '修改了xxx文件'")]),t._v("  如果你觉得"),a("strong",[t._v("修改文件的add操作")]),t._v(",加上commit的操作有点繁琐，那么可以将两个命令结合来使用（注意刚添加的新文件不可使用该命令结合；必须先执行 add 再 commit）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git log")]),t._v("  查看提交的历史   /   "),a("code",[t._v("git log --pretty=oneline")]),t._v(" 漂亮单线历史提交记录  /   "),a("code",[t._v("git log --pretty=oneline --graph")]),t._v(" 漂亮的图形单线历史提交记录")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git reflog")]),t._v("    如果我们回退到了之前版本，但是想看全部提交历史版本信息;可用git reflog 查看")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git reset --hrad 具体版本校验和")]),t._v("  回退到具体版本（如：git reset --hard 2d44982）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git remote")]),t._v("  查看远程地址；如果想看具体远程地址 ->  "),a("code",[t._v("git remote –v")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git remote add origin https://github.com/lyk19990226/wyymusic.git")]),t._v("  添加(连接) 远程地址")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git push")]),t._v("   /   "),a("code",[t._v("git push -u origin 分支名")]),t._v("   将当前分支推送到(origin)远程仓库的指定分支")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git pull")]),t._v("  从远程仓库获取最新的代码并合并到本地仓库;"),a("code",[t._v("(git pull 相当于 git fetch + git merge)")]),t._v("如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git fetch")]),t._v("  默认情况下是从origin中获取代码  "),a("code",[t._v("git origin")])]),t._v(" "),a("li",[a("code",[t._v("git merge (rebase)")]),t._v(" 获取到代码后默认并没有合并到本地仓库，我们需要通过merge来合并")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git tag")]),t._v("  查看本地仓库创建的所有标签")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git tag v1.0.0")]),t._v("   在本次提交信息中创建标签  （本地仓库）")]),t._v(" "),a("li",[a("code",[t._v("git tag -a v1.0.1 -m '标签额外信息补充'")]),t._v("   在本次提交信息中创建标签 并 加上额外的信息补充 （本地仓库）")]),t._v(" "),a("li",[t._v("注意：默认情况下，git push 命令并不会传送（本地仓库创建的）标签到远程仓库服务器上。\n"),a("ul",[a("li",[t._v("在创建完标签后你必须显式地推送标签到共享服务器上，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签；具体操作如下：")])])]),t._v(" "),a("li",[a("code",[t._v("git push origin v1.0.0")]),t._v("   指定本地仓库创建的具体标签 共享到git远程仓库上")]),t._v(" "),a("li",[a("code",[t._v("git push origin --tags")]),t._v("   将本地仓库创建的所有标签 共享到git远程仓库上、")]),t._v(" "),a("li",[a("code",[t._v("git tag -d v1.0.1")]),t._v("    删除本地仓库的标签 tag")]),t._v(" "),a("li",[a("code",[t._v("git push origin --delete v1.0.1")]),t._v("   删除远程仓库的标签 tag")]),t._v(" "),a("li",[a("code",[t._v("git checkout v1.0.0")]),t._v("     检出某个标签所指向的文件版本   -> 检出tag")]),t._v(" "),a("li",[a("code",[t._v("git reset --hard v1.0.0")]),t._v("   回退到某个标签所指向的文件版本")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git branch")]),t._v("  查看本地所有分支")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("git branch 分支名")]),t._v("  创建一个分支")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git checkout 分支名")]),t._v("  切换到指定分支")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git switch 分支名")]),t._v("   切换到指定分支")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git checkout -b 分支名")]),t._v("  创建一个分支，并切换到该分支(指新创建的分支)")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git merge 需合并到该分支的分支名")]),t._v("    合并分支  （跟rebase的具体区别可查看：11.1图例）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git rebase 需合并到该分支的分支名")]),t._v("  合并分支  （跟merge的具体区别可查看：11.1图例）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git branch –v")]),t._v("   查看当前所有的分支，同时查看最后一次提交")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git branch --merged")]),t._v("    查看所有合并到当前分支的分支")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git branch --no-merged")]),t._v("   查看所有没有合并到当前分支的分支")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git branch –d 分支名")]),t._v("   删除当前指定分支")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git branch –D 分支名")]),t._v("  强制删除指定分支")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git push origin --delete 分支名")]),t._v("  删除远程仓库指定分支")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git checkout --track origin/分支名")]),t._v("  跟踪远程仓库指定分支")])])])])]),t._v(" "),a("h2",{attrs:{id:"_14、公司业务具体开发操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14、公司业务具体开发操作"}},[t._v("#")]),t._v(" 14、公司业务具体开发操作")]),t._v(" "),a("h3",{attrs:{id:"_14-1-已经有远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-已经有远程仓库"}},[t._v("#")]),t._v(" 14.1.已经有远程仓库")]),t._v(" "),a("h4",{attrs:{id:"已经有项目了-并且有远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#已经有项目了-并且有远程仓库"}},[t._v("#")]),t._v(" 已经有项目了，并且有远程仓库")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone xxxxxxxx.com\n//进行开发\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'提交'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull // "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch + "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merger\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"_14-2-没有远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-2-没有远程仓库"}},[t._v("#")]),t._v(" 14.2.没有远程仓库")]),t._v(" "),a("h4",{attrs:{id:"开发一个全新的项目-由你来搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发一个全新的项目-由你来搭建"}},[t._v("#")]),t._v(" 开发一个全新的项目(由你来搭建)")]),t._v(" "),a("ul",[a("li",[t._v("方案一：先创建一个远程仓库, 再clone下来，再进行项目搭建（推荐）")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone xxxxxxxx.com\n//在clone下来的文件夹中开始搭建整个项目\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'提交'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ul",[a("li",[t._v("方案二：2.1:先在本地搭建项目,然后创建远程仓库,  然后本地仓库添加(连接)远程仓库 （稍微麻烦）\n"),a("ul",[a("li",[t._v("远程仓库分支名(master)跟本地仓库分支名(master)；"),a("strong",[t._v("即分支名一样的情况：")])])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("//本地搭建好项目后  -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  创建远程仓库\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin xxxxxx.com\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("origin/main \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge  --allow-unrelated-histories  // 如果合并发现又打开一个另外一个git bash窗口，叫你输入合并理由的；你可以直接输入 -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("   :wq + 回车键ebter    强制退出\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("ul",[a("li",[t._v("方案二：2.2:先在本地搭建项目,然后创建远程仓库,  然后本地仓库添加(连接)远程仓库（稍微麻烦）\n"),a("ul",[a("li",[t._v("远程仓库分支名(main) 和 本地仓库分支名(master) ；"),a("strong",[t._v("即分支名不一样的情况：")])]),t._v(" "),a("li",[t._v("git checkout --track origin/分支名")])])])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("//远程分支名为main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  本地分支名为master 的情况  \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote origin "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" git@152.136.185.210:coderhub/coder_demo.git\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("origin/main 【将上游分支设置为：origin/main即main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("origin/main是从git服务器远程仓库 fetch下来的远程分支"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge  --allow-unrelated-histories  （强制合并两个没有任何关系的分支；即没有共同的祖先对象）\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config push.default upstream\n//（默认情况下配置为：config push.defult simple；而simple：默认远程推送同名的当前分支即master。但是远程分支为main；所以会报错）\n//我们需要设置成upstream（即使用上游分支）：远程推送 本地的上游分支-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("上游分支我们在前面已经设置成\norigin/main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("即main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("则远程分支跟本地分支同名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("即可推送成功；\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push //推送成功\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);